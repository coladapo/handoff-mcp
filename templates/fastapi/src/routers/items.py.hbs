from typing import List
from fastapi import APIRouter, HTTPException
from src.models.item import Item, ItemCreate, ItemUpdate

router = APIRouter()

# In-memory storage for demo
items_db = {}
item_counter = 0


@router.get("/items", response_model=List[Item])
async def list_items():
    """List all items."""
    return list(items_db.values())


@router.post("/items", response_model=Item, status_code=201)
async def create_item(item: ItemCreate):
    """Create a new item."""
    global item_counter
    item_counter += 1
    item_id = str(item_counter)
    
    new_item = Item(id=item_id, **item.model_dump())
    items_db[item_id] = new_item
    
    return new_item


@router.get("/items/{item_id}", response_model=Item)
async def get_item(item_id: str):
    """Get item by ID."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    
    return items_db[item_id]


@router.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: str, item_update: ItemUpdate):
    """Update an item."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    
    item = items_db[item_id]
    update_data = item_update.model_dump(exclude_unset=True)
    
    for field, value in update_data.items():
        setattr(item, field, value)
    
    return item


@router.delete("/items/{item_id}", status_code=204)
async def delete_item(item_id: str):
    """Delete an item."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    
    del items_db[item_id]